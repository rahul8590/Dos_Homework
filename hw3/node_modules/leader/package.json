{
  "name": "leader",
  "version": "0.0.1",
  "author": {
    "name": "Mark Cavage",
    "email": "mcavage@gmail.com"
  },
  "description": "Leader election based on ZooKeeper",
  "repository": {
    "type": "git",
    "url": "git://github.com/mcavage/node-leader.git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "./node_modules/.bin/tap ./test"
  },
  "dependencies": {
    "zookeeper": "3.4.1"
  },
  "devDependencies": {
    "async": "0.1.15",
    "log4js": "0.4.1",
    "tap": "0.2.0",
    "node-uuid": "1.3.3"
  },
  "engine": {
    "node": ">=0.6"
  },
  "readme": "node-leader is a micro library that implements the standard\n[ZooKeeper](http://zookeeper.apache.org/)\n[leader election algorithm](http://zookeeper.apache.org/doc/trunk/recipes.html#sc_leaderElection).\n\nWhile functional, this is a little bit work-in-progress, as not all ZooKeeper\nevents/errors are handled, nor is error propagation to the client very \"nice\".\n\n# Usage\n\n    var assert = require('assert');\n    var elect = require('leader').elect;\n    var log4js = require('log4js');\n\n\n    var opts = {\n      zookeeper: 'localhost:2181',\n      log4js: log4js,\n      znode: '/my/service/election'\n    };\n    elect(opts, function(err, node) {\n      assert.ifError(err);\n      if (node.leader) {\n        console.log('Hooray! I am the leader!');\n      } else {\n        node.on('leader', function() {\n          console.log('I got elected as the leader!');\n        });\n      }\n    });\n\n# Installation\n\n    $ npm install leader\n\n# How does this work?\n\nAs mentioned above, this is a verbatim implementation of the ZooKeeper \"recipe\"\nfor doing\n[leader election](http://zookeeper.apache.org/doc/trunk/recipes.html#sc_leaderElection).\n\nIf that's hard to parse, it looks like this in ZooKeeper.  All nodes in your\nsystem use some path as the place to watch.  Everybody registers with a\nZooKeeper-generated sequential key, and the node with the lowest key wins.\nEveryone that's not a leader registers to watch the _next_ node in the\necosystem, and when that node gets deleted (which happens if the node\ndisconnects), then $self looks to see if they're the leader, and if not, sets\nup a watch on the next node.  As an example, let's assume `/foo` is the place\nin ZooKeeper we're talking about:\n\n\n```\nNodeA -> /foo/01\n      ^\n      |\n    Watch (01)\n      |\n      |\nNodeB -> /foo/02\n      ^\n      |\n    Watch (02)\n      |\n      |\nNodeC -> /foo/03\n...\n```\n\nNow, let's say `NodeB` crashes.  `NodeC` will get a notification from ZooKeeper,\nand go look for children of `/foo`. Upon seeing that `03` is not the lowest,\n`NodeC` will not be the leader, but instead will register to watch `NodeA`:\n\n```\nNodeA -> /foo/01\n      ^\n      |\n    Watch (01)\n      |\n      |\nNodeC -> /foo/03\n...\n```\n\nNow, if some time later, `NodeB` rejoins (because you know, someone in meatspace\ngot paged and brought it back up), it would likely get `04` and be watching\n`NodeC`.  Lastly, if `NodeA` crashed, `NodeC` would get the `leader` event, and\nyou'd go do whatever it is you need to do to take over that responsibility.\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Mark Cavage\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## Bugs\n\nSee <https://github.com/mcavage/node-leader/issues>.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mcavage/node-leader/issues"
  },
  "_id": "leader@0.0.1",
  "dist": {
    "shasum": "2eaec140ff4199e8c128d3c6b27ad2fa9e200797"
  },
  "_from": "leader@",
  "_resolved": "https://registry.npmjs.org/leader/-/leader-0.0.1.tgz"
}
