{
  "name": "raftjs",
  "author": {
    "name": "Joel Martin",
    "email": "github@martintribe.org",
    "url": "http://github.com/kanaka"
  },
  "description": "Raft.js is an implementation of the Raft Consensus Algorithm",
  "license": "MPL-2",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/kanaka/raft.js.git"
  },
  "main": "index.js",
  "files": [
    "LICENSE.txt"
  ],
  "engines": {
    "node": ">=0.8.9"
  },
  "readme": "# Raft.js: Raft Consensus Algorithm in JavaScript\n\nRaft.js is an implementation of the Raft consensus algorithm in\nJavaScript. The Raft algorithm was developed by Diego Ongaro and John\nOusterhout at Stanford University. Please refer to their excellent\npaper on Raft: [\"In Search of an Understandable Consensus\nAlgorithm\"](https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf).\n\n\n## Example\n\nStart a node REPL and require one of the test modules.\n\n    > t = require('./test_local');\n    # OR\n    > t = require('./test_http');\n\nThe local test module starts servers in the same process that\ncommunicate directly with function calls. The http test creates\nservers in the same process but they communicate with each other by\nsending messages over HTTP.\n\nStart 3 servers (an optional second argument specifies the number of\nservers to start):\n\n    > t.startServers({debug:true});\n\nGet the leader ID and show its entry log:\n\n    > lid = t.getLeaderId();\n    > t.getAll('log')[lid];\n\nSet a key/value in the state machine, show the log and\nstateMachine for all the servers, then read back the value:\n\n    > t.serverPool[lid].clientRequest({op:\"set\",key:'a',value:1}, function(results) { console.log(\"results: \", results); });\n    > t.getAll('log');\n    > t.getAll('stateMachine');\n    > t.serverPool[lid].clientRequest({op:\"get\",key:'a',ro:1}, function(results) { console.log(\"results: \", results); });\n\nAdd a new server (ID 3), set a different value and show that it\nhas propagated to all the server state machines:\n\n    > t.addServer(3,{debug:true});\n    > t.serverPool[lid].clientRequest({op:\"set\",key:'b',value:2}, function(results) { console.log(\"results: \", results); });\n    > t.getAll('stateMachine');\n\n## Status\n\nThe following features have been implemented (the section number of\nthe Raft paper is listed in brackets):\n\n* [5.2] Leader election\n* [5.3] Log replication and persistence\n* [5.4, 5.5, 5.6, 5.7] Safety features\n* [7.1] Client interaction (except filtering duplicates)\n* [5.1] RPCs:\n * In-process (direct function calls) for quick testing\n * Over HTTP\n* [6] Membership change / joint consensus\n\n## TODO\n\n* [7.1] filter duplicate client requests\n* [7.2] log compaction\n* faster resend of appendEntries when follower responds with fail\n  (nextIndex update)\n* faster re-issue of requestVote to non-responders\n* more exception handling\n* in depth testing\n\n\n## License\n\nLicensed under [MPL-2.0](http://www.mozilla.org/MPL/2.0/). See\nLICENSE.txt.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kanaka/raft.js/issues"
  },
  "_id": "raftjs@0.0.1",
  "dist": {
    "shasum": "5cfa80aec2810345c2ce26fe825f366e293ba42f"
  },
  "_from": "raftjs@",
  "_resolved": "https://registry.npmjs.org/raftjs/-/raftjs-0.0.1.tgz"
}
