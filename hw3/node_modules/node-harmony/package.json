{
  "name": "node-harmony",
  "version": "1.0.0",
  "description": "Harmony is a /smart/ balancing module for nodejs (or any type of TCP server cluster). It's more than just a basic round robin balancer and is capable of persistent connections, detecting timeouts in servers, requeuing connections, and weighted balancing. This module is meant to grow encompass many different techniques and be suitable for /most/ applications. If you have ideas or something isn't working properly then please submit a bug report.",
  "license": "artistic",
  "author": {
    "name": "Tony O'Dell"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tony-o/harmony.git"
  },
  "dependencies": {
    "skoconc": "*"
  },
  "readme": "#HARMONY.js\n\nHarmony is a /smart/ balancing module for nodejs (or any type of TCP server cluster).  It's more than just a basic round robin balancer and is capable of persistent connections, detecting timeouts in servers, requeuing connections, and weighted balancing.\n\nThis module is meant to grow encompass many different techniques and be suitable for /most/ applications.  If you have ideas or something isn't working properly then please submit a bug report.\n\n##Single Server Example (All clients are on one server with the balancer)\n\n```javascript\nvar harmony = require(\"node-harmony\"); //awww, harmony\n\nvar http = require(\"http\"); //only for this example\n\nvar s = new harmony.server({\n  persistent:false // I don't care if connections *ALWAYS* go to the same server\n  ,unavailable:function(e,c){\n    c.write(\"Unavailable, holmes.\"); // If my connection attempt times out then I'll call this function\n  }\n});\n\nvar c1 = new harmony.client({\n  balance:1000 // I'm big at 1000 weight\n  ,listenport:1080 // My server is on port 1080 - I run alongside Express and other sugar\n  ,ack:60*1000 // I want to send an \"I'm alive\" message every minute\n});\nvar c2 = new harmony.client({\n  balance:500 // I'm average at 500 weight\n  ,listenport:1090\n  ,ack:60*1000\n});\n\nvar s1 = http.createServer(function(q,s){\n  s.end(\"served from port 1080\");\n  c1.close();\n  /*\n    server will only use s2;\n  */\n\n});\ns1.listen(1080);\n\nvar s2 = http.createServer(function(q,s){\n  s.end(\"served from port 1090\");\n});\n\ns2.listen(1090);\n```\n\n##Multiple Server Example (Clients are on different machines from the balancer)\nIn this example you have a balancer (balance.mydomain) and two servers you want to balance between (host#.mydomain).  On both servers you want to balance between you can connect them with the method below, even if your servers aren't written in node.js.  If your servers aren't written in node.js, EG you want to balance apache, then set the 'localport' option of the client to be whatever port apache is listening on. \n\n###Balancing server @ balance.mydomain\n```javascript\nvar harmony = require(\"node-harmony\"); //awww, harmony\n\nvar s = new harmony.server({\n  persistent:false // I don't care if connections *ALWAYS* go to the same server\n  ,unavailable:function(e,c){\n    c.write(\"Unavailable, holmes.\"); // If my connection attempt times out then I'll call this function\n  }\n});\n```\n\n###Client Server #1 @ host1.mydomain\nThis code runs on host1.mydomain, not on the balancer\n```javascript\nvar harmony = require(\"node-harmony\");\n\nvar c1 = new harmony.client({\n  balance:1000             // I'm big at 1000 weight\n  ,listenport:1080         // My server is on port 1080 - I run alongside Express and other sugar\n  ,ack:60*1000             // I want to send an \"I'm alive\" message every minute\n  ,host:\"balance.mydomain\" // Hostname of the balancer \n});\n\n/* If you already have a server running and just want to use the balancer then you don't need the code below, just set the listenport above to be whatever port your server is running on */\nvar http = require(\"http\");\nvar s1 = http.createServer(function(q,s){\n  s.end(\"served from port 1080, server 1\");\n  c1.close();\n});\ns1.listen(1080);\n```\n\n###Client Server #2 @ host2.mydomain\nThis code runs on host2.mydomain, not on the balancer\n```javascript\nvar harmony = require(\"node-harmony\");\n\nvar c2 = new harmony.client({\n  balance:500 // I'm average at 500 weight\n  ,listenport:1080\n  ,ack:60*1000\n  ,host:\"balance.mydomain\"\n});\n\n/* If you already have a server running and just want to use the balancer then you don't need the code below, just set the listenport above to be whatever port your server is running on */\nvar http = require(\"http\");\nvar s2 = http.createServer(function(q,s){\n  s.end(\"served from port 1080, server 2\");\n  c2.close();\n});\ns2.listen(1080);\n```\n\nThere are a lot more options than what is shown here, they're discussed below.\n\n##Download\n```\n> npm install node-harmony \n```\n\n##Docs\n\n###Server\n\n```\nvar harmony = require(\"node-harmony\");\nvar balancer = harmony.server(options);\n```\n\nThe server expects load balancing servers to acknowledge their availability and to report in once in a while.  If the load target fails to ack within a certain established period then the server gives up on it and excludes it from it's pool of available targets until the target acknowledges.\n\nIt is the target's responsibility to report in to the server and provide port information on where it expects the server to pipe it's potential [external] clients to.  So while the server listens on port 3000, it may be proxying connections to ```server1:5000 , server1:5005 , server2:5000```.\n\n####Options\n\nThe options are passed in via JSON Object and the following options are available:\n#####Administration Port (adminport)\nDefault: ```1666```\n\nThis is the port the load balancer listens on for possible load bearing targets to balance traffic with.  This port is simply for administration and not for serving any content.\n\n#####Listen Port (listenport)\nDefault: ```3000```\n\nThe port the server listens on for client connections to connect with the potential load bearing servers.\n\n#####Persistent Connections (persistent)\nDefault: ```{ } ```\n\nBy default, the balancer will try to persist connections, if you don't need it or care about it, passing in a value of ```false``` will ignore persistence.\n\n#####Host (host)\nDefault: ```localhost```\n\nThis is the host the server will attempt to listen on.\n\n#####Concurrency (concurrency)\nDefault: ```-1```\n\nSetting the concurrency will limit the load balancer to X number of open connections at a time.  Certain protocols choke on the way this blocks, including HTTP.  Setting this number to 0 or more will cause the server to only allow X number of connections at a time - 0 being paused and 1 or more allowing that number.\n\n#####Requeue (requeue)\nDefault: ```1```\n\nIf the connection fails or something bad happens, the server will requeue the connection X number of times prior to displaying the 'unavailable' message described next.\n\n#####Unavailable (unavailable)\nDefault: ```null```\n\nThis option can take two separate items, a 'function' or a string.  \nIf this option contains a string then the server will write out the string to client socket and then close the socket.\nIf the option is a function, it will call the function with parameters ```error, socket```.\n\n#####Host Timeout (hostTimeout)\nDefault: ```1```\n\nThe time in minutes which a target load bearing server is considered 'not available' \n\n###Load Bearing Targets (Internal Clients)\n\n```\nvar harmony = require(\"node-harmony\");\nvar reporter = harmony.client(options);\n```\n\nThe server expects load balancing servers to acknowledge their availability and to report in once in a while.  If the load target fails to ack within a certain established period then the server gives up on it and excludes it from it's pool of available targets until the target acknowledges.\n\nIt is the target's responsibility to report in to the server and provide port information on where it expects the server to pipe it's potential [external] clients to.  So while the server listens on port 3000, it may be proxying connections to ```server1:5000 , server1:5005 , server2:5000```.  \n\nThe load targets can be added and removed as desired and the load balancer should gracefully handle those adds/removes without any hiccups with the exception of persistent connections.\n\n####Options\n\nThe options are passed in via JSON Object and the following options are available:\n#####Host (host)\nDefault: ```localhost```\n\nThis is the host your balancer is running on, it may or not be the same machine.\n\n#####Administration Port (adminport)\nDefault: ```1666```\n\nThis is the port your balancer is listening on.\n\n#####Listening Port (listenport)\nDefault: ```80```\n\nThis is the port your load bearing server is listening on.  This is the port your balancing server will try to proxy connections with.\n\n#####Balance (balance)\nDefault: ```500```\n\nThis is an arbitrary number used to weight the target.  The higher the number the higher the precedence on using that server.\n\nIE:\n * LBServer1 weights 500 and will handle 25% of requests\n * LBServer2 weights 500 and will handle 25% \n * LBServer3 weights 1000 and will handle 50% (if you're not receiving connections faster than LBServer3 can close them then LBServer3 will handle 100% of requests)\n\n#####Acknowledge Time (ack)\nDefault: ```300,000```\n\nThis is a rough time that the load target will attempt to check in and acknowledge it's still alive.  Setting this to half or less of what the server expects would be ideal.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tony-o/harmony/issues"
  },
  "_id": "node-harmony@1.0.0",
  "_from": "node-harmony@"
}
