{
  "name": "simples",
  "version": "0.5.3",
  "description": "Simple HTTP(S) Server",
  "keywords": [
    "cors",
    "framework",
    "http",
    "https",
    "rest",
    "simple",
    "server",
    "static",
    "vhost",
    "web",
    "websocket"
  ],
  "homepage": "http://micnic.github.io/simpleS",
  "bugs": {
    "url": "https://github.com/micnic/simples/issues",
    "email": "micnic90@gmail.com"
  },
  "license": "GPL-3.0",
  "author": {
    "name": "Micleusanu Nicu",
    "email": "micnic90@gmail.com",
    "url": "https://github.com/micnic"
  },
  "main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/micnic/simpleS"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "<img src=\"https://raw.github.com/micnic/simpleS/master/logo.png\"/>\n# 0.5.3\n\nsimpleS is a simple HTTP(S) server for Node.JS that has some special features:\n\n- Simple structure with minimum configuration\n- No dependencies and high performance\n- Advanced routing for http requests, static files and errors\n- Restful verbs\n- Unique interface for requests and responses\n- Response compression (deflate and gzip)\n- Virtual Hosting\n- CORS support and Referer blocking\n- Sessions\n- Template engine connection\n- WebSocket implementation (version 13, RFC 6455)\n- Client-side simple API for AJAX and WebSocket\n\n#### Works in Node.JS 0.10+\n#### Any feedback is welcome!\n\n#### More simple modules:\n- [simpleR](http://micnic.github.com/simpleR/)\n- [simpleT](http://micnic.github.com/simpleT/)\n- [simpleU](http://micnic.github.com/simpleU/)\n\n### [Changelog](https://github.com/micnic/simpleS/wiki/Changelog)\n### [Documentation](https://github.com/micnic/simpleS/wiki/Documentation)\n\n## Instalation\n\n    npm install simples\n\n## Examples\n\nSee the folder `examples/` in the module directory, it contains examples that cover most simpleS features.\n\n## Usage\n\n```javascript\nvar simples = require('simples');\n\nvar server = simples(12345); // Your server is set up on port 12345\n```\n\n## Routing\n\n```javascript\nserver.get('/', function (connection) {\n    connection.end('root');\n});\n\nserver.serve('static_files'); // Route for static files located in the folder \"static_files\"\n\nserver.error(404, function (connection) {\n    connection.end('404');\n});\n```\n\n## Virtual Hosting\n\n```javascript\nvar mainHost = server; // Main host\nvar host1 = server.host('example.com'); // Other hosts\nvar host2 = server.host('example2.com');\n\n// Now for each host you can apply individual routing\nmainHost.get('/', function (connection) {\n    connection.end('Main Host');\n});\n\nhost1.get('/', function (connection) {\n    connection.end('Host1');\n});\n\nhost2.get('/', function (connection) {\n    connection.end('Host2');\n});\n```\n\n## WebSocket\n\n```javascript\nserver.ws('/', {\n    limit: 1024, // The maximum size of a message\n    protocols: ['echo'], // The accepted protocols\n    raw: true // Connections in raw mode, see docs for more info\n}, function (connection) {\n    console.log('New connection');\n\n    connection.on('message', function (message) {\n        console.log('Message: ' + message.data);\n        connection.send(message.data);\n    });\n\n    connection.on('close', function () {\n        console.log('Connection closed');\n    });\n});\n```\n\nOn client:\n\n```javascript\n// Use browser built-in API\nvar socket = new WebSocket('ws://localhost:12345/', 'echo'); // Enjoy the real-time connection\n\nsocket.onmessage = function (event) {\n    console.log(event.data);\n};\n\nsocket.send('ECHO');\n\n// or simpleS client-side simple API\nvar socket = simples.ws('/', ['echo']);\n\nsocket.on('message', function (message) {\n    console.log(message.data);\n});\n\nsocket.send('ECHO');\n```\n\n## Template engine connection\n\n```javascript\nserver.engine(bestTemplateEngine);\n```",
  "readmeFilename": "README.md",
  "_id": "simples@0.5.3",
  "dist": {
    "shasum": "97851935f438dcd86795efac4b2ebf9a57d12588"
  },
  "_from": "simples@",
  "_resolved": "https://registry.npmjs.org/simples/-/simples-0.5.3.tgz"
}
