{
  "name": "bully",
  "version": "0.2.1",
  "description": "Implementation of the Bully Algorithm to elect a master among equal peers in a distributed system",
  "main": "index.js",
  "dependencies": {
    "inherits": "~2.0.0",
    "debug": "~0.7.2"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node example.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jaclar/bully.git"
  },
  "keywords": [
    "peer-to-peer",
    "slave-master",
    "distributed",
    "election"
  ],
  "author": {
    "name": "Lars Jacob",
    "email": "lars@iamat.com",
    "url": "https://twitter.com/jaclar"
  },
  "license": "MIT",
  "readme": "# Bully\n\nnode.js module to elect a master peer in a distributed system. This module uses the\n[Bully Algorithm](http://en.wikipedia.org/wiki/Bully_algorithm) for the election\nprocess. Unresponsive/offline peers will be recognized through heartbeat timeouts.\n\n## Usage\n\nInstall via ```npm```:\n```bash\nnpm install bully\n```\n\nInclude in your project\n```javascript\nvar Bully = require('bully');\n\nvar opts = { id: \"id\", /* unique identifier of this peer */\n             peers: [], /* event emitter instances of other peers */\n             me: me /* event emitter instance of local peer */\n           }\n\nvar bully = new Bully(opts);\n\nbully.on(\"master\", function () {\n    console.dir('I am now the master');\n});\nbully.on(\"stepped_down\", function () {\n    console.dir('Unfortunately I had to step down from my responsibilities');\n});\n\n```\n\n### Adding a new peer\n\n```javascript\nvar EventEmitter = require('events').EventEmitter;\n\nvar peer = new EventEmitter();\npeer.id = 'anoter_unique_id';\n\nbully.addPeer(peer);\n```\n\n### Remove peer\n\n```javascript\nbully.removePeer(\"peers_unique_id\");\n```\n\n### Error handling\n\n```javascript\nbully.on(\"error\", function (err) {\n    // handle error here\n});\n```\n\n**Erros:**\n\n-  ```Unknown Peer```: triggered once a message is received from an unknown\n\n## Example\n\n```javascript\nvar Bully = require('bully');\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar peers = [],\n    bullies = [],\n    identifiers = [];\n\n// generating identifiers\nvar i = 0;\nfor (i = 0;i < 10; i+= 1) {\n    identifiers.push(i);\n}\n\n// generating peers\nidentifiers.forEach(function (n) {\n    var peer = new EventEmitter();\n    peer.id = n;\n    peers.push(peer);\n});\n\n// setting up bully instances for each peer\nidentifiers.forEach(function (b) {\n    var opts = {\n        id: b,\n        timeout: 500\n    },\n    bully;\n\n    opts.peers = peers.filter(function (p) {\n        if (p.id === b) {\n            opts.me = p;\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    bully = new Bully(opts);\n\n    bully.on(\"master\", function () {\n        console.dir(b + \": is now master\");\n    });\n\n    bully.on(\"stepped_down\", function () {\n        console.dir(b + \": stepped down\");\n    });\n    bullies.push(bully);\n});\n\n// removing peer 9\nsetTimeout(function () {\n    console.log(\"\\nDelete bully 9\");\n    bullies[9].stepDown();\n    peers[9].removeAllListeners();\n\n}, 8000);\n\n// adding new peer (10)\nsetTimeout(function () {\n    console.log(\"\\nAdd bully 10\");\n    var peer = new EventEmitter();\n    peer.id = 10;\n    peers.push(peer);\n\n    var opts = {\n        id: 10,\n        timeout: 500\n    },\n        bully;\n\n    opts.peers = peers.filter(function (p) {\n        if (p.id === 10) {\n            opts.me = p;\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    bullies.forEach(function (b) {\n        b.addPeer(peer);\n    });\n    bully = new Bully(opts);\n\n    bully.on(\"master\", function () {\n        console.dir(10 + \": is now master\");\n    });\n\n    bully.on(\"stepped_down\", function () {\n        console.dir(10 + \": stepped down\");\n    });\n    bullies.push(bully);\n\n\n}, 10000);var EventEmitter = require(\"events\").EventEmitter;\n\nvar peers = [],\n    bullies = [],\n    identifiers = [];\n\n// generating identifiers\nvar i = 0;\nfor (i = 0;i < 10; i+= 1) {\n    identifiers.push(i);\n}\n\n// generating peers\nidentifiers.forEach(function (n) {\n    var peer = new EventEmitter();\n    peer.id = n;\n    peers.push(peer);\n});\n\n// setting up bully instances for each peer\nidentifiers.forEach(function (b) {\n    var opts = {\n        id: b,\n        timeout: 500\n    },\n    bully;\n\n    opts.peers = peers.filter(function (p) {\n        if (p.id === b) {\n            opts.me = p;\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    bully = new Bully(opts);\n\n    bully.on(\"master\", function () {\n        console.dir(b + \": is now master\");\n    });\n\n    bully.on(\"stepped_down\", function () {\n        console.dir(b + \": stepped down\");\n    });\n    bullies.push(bully);\n});\n\n// removing peer 9\nsetTimeout(function () {\n    console.log(\"\\nDelete bully 9\");\n    bullies[9].stepDown();\n    peers[9].removeAllListeners();\n\n}, 3000);\n\n// adding new peer (10)\nsetTimeout(function () {\n    console.log(\"\\nAdd bully 10\");\n    var peer = new EventEmitter();\n    peer.id = 10;\n    peers.push(peer);\n\n    var opts = {\n        id: 10,\n        timeout: 500\n    },\n        bully;\n\n    opts.peers = peers.filter(function (p) {\n        if (p.id === 10) {\n            opts.me = p;\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    bullies.forEach(function (b) {\n        b.addPeer(peer);\n    });\n    bully = new Bully(opts);\n\n    bully.on(\"master\", function () {\n        console.dir(10 + \": is now master\");\n    });\n\n    bully.on(\"stepped_down\", function () {\n        console.dir(10 + \": stepped down\");\n    });\n    bullies.push(bully);\n\n\n}, 5000);\n\nsetTimeout(function () {\n    console.log(\"\\nSend faked victory message\");\n\n    bullies[3].on(\"error\", function (err) {\n        if (err.message === \"Unknown Peer\") {\n            console.dir(\"Peer 3 ignored malicious victory claim form unknown peer \" + err.id);\n        }\n    });\n    // send malicious peer victory\n    peers[3].emit(\"victory\", {id: 99});\n}, 6000);\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jaclar/bully/issues"
  },
  "_id": "bully@0.2.1",
  "dist": {
    "shasum": "df3697f5be362e1d98e00902452a109bac1a3e9c"
  },
  "_from": "bully@",
  "_resolved": "https://registry.npmjs.org/bully/-/bully-0.2.1.tgz"
}
